#include <iostream> // directive de préprocesseur; charger une bibliothèque
#include <string> // toujours inclure cette bibliothèque pour les chaines de charactères
#include <cmath> // pour les maths
using namespace std; // utilise l'espace des noms standard
int main() // crée la fonction main retournant un entier, cf retun 0
{
cout << "Bonjour tout le monde !" << endl << "Comment allez-vous ?" << endl;
/* cout : inclu dans iostream, c'est une instruction
cout affiche un message en console
<<
"endl" est un retour à la ligne
Les instructions se terminent toujours par ";" */
return 0; // la sortie de main
}


/*
########################################
VARIABLES
########################################

Types de variables:
bool:	Une valeur parmi deux possibles, vrai (true) ou faux (false).
char:	Un caractère.
int:	Un nombre entier. NB int / int = int !! (la partie entière)
unsigned int:	Un nombre entier positif ou nul.
double:	Un nombre à virgule.
string:	Une chaîne de caractères, c'est-à-dire un mot ou une phrase.

Déclarer un variable : TYPE NOM(VALEUR); ou TYPE NOM = VALEUR;
int a(2),b(4),c(-1); // pour déclarer plusieurs variables du même type
TYPE NOM; // pour déclarer sans initialiser
int ageUtilisateur(16);  //Déclaration d'une variable.
int& maVariable(ageUtilisateur); //Déclaration d'une référence (= alias) nommée maVariable du même type que ageUtilisateur
ageUtilisateur=23; // Affectation d'une nouvelle valeur dans une variable déjà déclarée
int const VARIABLE(10); // pour déclarer une constante
++VAR; // pour incrémenter de un une variable
--VAR; // pour décrémenter de un une variable
VAR += 3; // pour incrémenter de 3
VAR -= 3; // idem pour la soustraction
VAR /= 3; // idem pour la division par 3
VAR *= 3; // pour la division

########################################
STRUCTURES DE CONTROLE
########################################
if (!CONDITION) // on met la négation dans les parenthèses
{

}
else if (condition)
{

}
else
{

}

// pour ne tester que l'égalité de int, unsigned int, char (pas double !)

switch (VAR)
{
case 0:
	Blabla;
	break;
case 1:
	Blabla;
	break;
case etc...:
	Blabla;
	break;
default:
	Blabla;
	break;
}

while (condition)
{
    // Instructions à répéter
}

do
{
    // Instructions
} while (condition);
// Ainsi la première instruction est toujours exécutée

for (initialisation ; condition ; incrementation)
{

}

########################################
Fonctions :
########################################

TYPE NAME( TYPE ARGUMENT, TYPE ARGUMENT ) // => prototype, [surcharge de fonction == même nom de fonction, différents arguments => fonction différente dans même espace des noms] 
//
{
	BLABLA;
	return BLABLA; // sauf si type == void
}

// PASSAGE PAR REFERENCE :
TYPE NAME( TYPE& ARGUMENT, etc...){} // permet de modifier la valeur de l'argument, un peu comme variable globale en python
// Exemple :
void echange(double& a, double& b)
{
    double temporaire(a); //On sauvegarde la valeur de 'a'
    a = b;                //On remplace la valeur de 'a' par celle de 'b'
    b = temporaire;       //Et on utilise la valeur sauvegardée pour mettre l'ancienne valeur de 'a' dans 'b'
}
// PASSAGE PAR REFERENCE CONSTANTE:
// Ne copie pas la valeur, comme avec un passage par valeur classique, mais ne modifie pas l'argument
// Evite de copier l'ensemble de l'argument (exemple string très lourde !)
// Exemple :
void f1(string const& texte);
{
}

// UTILISER PLUSIEURS FICHIERS: exemple avec un fichier intitulé "math"
// Fichier source math.cpp:

#include "math.h"

int ajouteDeux(int nombreRecu)
{
    int valeur(nombreRecu + 2);

    return valeur;
}



// Fichier d'entête / header .h
// On ne met que le prototype de la fonction

#ifndef MATH_H_INCLUDED
#define MATH_H_INCLUDED
*/
// On commente son code comme ça avec doxygen, dans le header :

/**
 * \brief Fonction qui ajoute 2 au nombre reçu en argument
 * \param nombreRecu  Le nombre auquel la fonction ajoute 2
 * \return nombreRecu + 2
 */

/*
#include <string> // on inclue dans le header seulement les library utilisées
// On n'inclue surtout pas "using namespace std", mais on utilise std::string ...

int ajouteDeux(int nombreRecu);
void afficherMessage(std::string message);

#endif // MATH_H_INCLUDED

// MAIN()

#include "math.h" // on utilise les guillemets et pas <>, pour inclure le .h, jamais .cpp

// VALEURS PAR DEFAUT
// Les valeurs par défaut sont spécifiées uniquement dans le prototype, pas dans la définition de la fonction !
// Exemple :
int nombreDeSecondes(int heures, int minutes = 0, int secondes = 0); // les valeurs par défaut doivent se trouver à la fin de la liste des paramètres (c'est-à-dire à droite).


#######################################################
Tableaux statiques et  tableaux dynamiques (vecteurs) :
#######################################################
// Tableaux statiques (=taille constante)
//Déclaration :
TYPE NOM[TAILLE]
// Exemple de déclaration :
int const tailleTableau(20);   //La taille du tableau, toujours à déclarer constante !
double anglesIcosagone[tailleTableau];
// Accès aux valeurs :
anglesIcosagone[0] // première valeur
// Parcours avec boucle:
for (int i(0), i<tailleTableau, ++i)
{
 cout << anglesIcosagone[i] << endl;
}
// Tableaux et fonctions :
double fonction(double tableau[], int tailleTableau) // il n'y a pas de moyen de connaitre la taille d'un tableau statique, si on en a besoin dans la fonction, il faut la mettre en argument.
{
    //…
	return UN_DOUBLE_ICI;
}
// NB : on ne peut pas écrire une fonction qui renvoie un tableau statique!
// NB : un tableau est toujours passé par référence, automatiquement, d'où l'abscence de & !

// Tableaux dynamiques (vecteurs)
#include <vector> // Ne pas oublier !
//Déclaration
vector<TYPE> NOM(TAILLE); // taille entre parenthèses
// Exemple :
vector<int> tableau(5, 3);  // Crée un tableau de 5 entiers valant tous 3
vector<double> tableau; // Crée un tableau de 0 nombre à virgule
tableau[0] = 118218;  // Remplissage de la première case
// Changer la taille :
tableau.push_back(8); // On ajoute une 4ème case au tableau qui contient la valeur 8
tableau.pop_back(); // On supprime la dernière case
tableau.size(); // Pour connaitre la taille du tableau
// Vecteurs et fonctions :
//Une fonction recevant un tableau d'entiers en argument :
void fonction(vector<int> a)
{
    //…
}
// Passage par référence constante pour gagner du temps (mais tableau dynamique non modifiable)
void fonction(vector<int> const& a)
{
    //…
}
// Dans les header penser à inclure:
#include <vector>
std::vector<int>& tableau;
// On peut créer une fonction qui renvoie un vecteur:
vector<double> encoreUneFonction(int a)
{
    //...
}

// Tableaux multidimensionnels:
type nomTableau[tailleX][tailleY]; //Déclaration
tableau[0][0]; // accède à la case en-bas à gauche de la grille
tableau[0][1]; // correspond à celle qui se trouve juste au dessus
tableau[1][0]; // se situe directement à sa droite
double grilleExtreme[5][4][6][2][7];
vector<vector<int> > grille; // vecteurs multidimensionnels. !! Pas un tableau, mais une suite de ligne les lignes peuvent avoir des longueurs différentes
grille[0].push_back(8); //Ajoute une case contenant 8 à la première ligne du tableau

// Strings comme les vecteurs !
size()
push_back()
+= // pour ajouter plusieurs lettres d'un coup

########################################
Lire et modifier des fichiers
########################################
#include <fstream>
string const nomFichier("C:/Nanoc/scores.txt"); // nom du fichier dans une variable
// Ecrire dans un fichier
ofstream monFlux(nomFichier.c_str(),ios::app); // création d'un objet de type flux. On doit utiliser la méthode .c_str() pour ouvrir le fichier, parametre ios::app, facultatif pour append.
if(monFlux)  //On teste si tout est OK
{
	monFlux << "Bonjour, je suis une phrase écrite dans un fichier." << endl;
}
else
{
    cout << "ERREUR: Impossible d'ouvrir le fichier." << endl;
}
// Lire un fichier:
// * Ligne par ligne :
string ligne;
getline(monFlux, ligne); //On lit une ligne complète
// * mot par mot :
double nombre;
monFlux >> nombre; //Lit un nombre à virgule depuis le fichier
string mot;
monFlux >> mot;    //Lit un mot depuis le fichier
// * char par char :
char a;
monFlux.get(a); // On obtient tous les char, tab, \n, etc..
// Pour changer de mode :
monFlux.ignore(); //On change de mode

//Exemple, lire tout un fichier:
   ifstream fichier("C:/Nanoc/fichier.txt"); // ! ifstream, pas ofstream ;)
   if(fichier)
   {
      //L'ouverture s'est bien passée, on peut donc lire

      string ligne; //Une variable pour stocker les lignes lues

      while(getline(fichier, ligne)) //Tant qu'on n'est pas à la fin, on lit
      {
         cout << ligne << endl;
         //Et on l'affiche dans la console
         //Ou alors on fait quelque chose avec cette ligne
         //À vous de voir
      }
   }
   else
   {
      cout << "ERREUR: Impossible d'ouvrir le fichier en lecture." << endl;
   }
// Fermeture prématurée d'un fichier (fait automatiquement si non)
flux.close();
// Ouverture volontaire (fait automatiquement si non)
ofstream flux;  //Un flux sans fichier associé
flux.open("C:/Nanoc/data.txt");

// Position du curseur :
// Connaître sa position en octet par rapport au début !
Pour ifstream	Pour ofstream
tellg()		tellp()
int position = fichier.tellp(); //On récupére la position
// Se déplacer
Pour ifstream	Pour ofstream
seekg()		seekp()
flux.seekp(seDeplacerDeCeNombreDeChar, position);
// avec poistion qui peut valoir : ios::beg, ios::end, ios::cur

//Connaitre la taille d'un fichier:
int main()
{
    ifstream fichier("C:/Nanoc/meilleursScores.txt");  //On ouvre le fichier
    fichier.seekg(0, ios::end);  //On se déplace à la fin du fichier
    int taille;
    taille = fichier.tellg();
    //On récupère la position qui correspond donc a la taille du fichier !
    cout << "Taille du fichier : " << taille << " octets." << endl;
    return 0;
}

########################################
Les Pointeurs
########################################
//Afficher l'adresse d'une variable:
int ageUtilisateur(16);
cout << "L'adresse est : " << &ageUtilisateur << endl;
// & avant la variable et pas après le type

// UN POINTEUR EST UNE VARIABLE QUI CONTIENT L'ADRESSE D'UNE AUTRE VARIABLE.
int *pointeur(0); //déclare pointeur contenant l'adresse d'une variable de type int.
// Toujours initialiser un pointeur à l'adresse 0, qui n'existe pas pour ne pas pointer vers qq'chose d'important.
// Stocker une adresse
pointeur = &ageUtilisateur;
//Afficher l'adresse
cout << pointeur;
//Afficher la valeur de la variable située à l'adresse du pointeur:
cout << *pointeur;

// Allocation dynamique
// Lors de la déclaration d'une variable, allocation, puis initialisation
// En fin de programme libération de la mémoire
int *pointeur(0);
pointeur = new int; // demande manuelle d'allocation dynamique d'une case mémoire pour stocker un entier
delete pointeur;  //On libère la case mémoire
pointeur = 0;       //On indique que le pointeur ne pointe plus vers rien

// Utilisation des pointeurs:
	// gérer soi-même le moment de la création et de la destruction des cases mémoire ;
	// partager une variable dans plusieurs morceaux du code ;
	// sélectionner une valeur parmi plusieurs options.

########################################
Bibliothèque cmaths
########################################
sqrt(), sin(rad), cos(rad), tan(rad), exp(), log(), log10(), fabs(), floor(), ceil()
pow(a,b)

########################################
Quand on mélange l'utilisation des chevrons et de getline(),
il faut toujours placer l'instruction cin.ignore() après la ligne cin>>a.

*/
